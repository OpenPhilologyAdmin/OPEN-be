---
openapi: 3.0.1
info:
  title: API V1
  version: v1
components:
  securitySchemes:
    bearer:
      type: apiKey
      name: Authorization
      in: header
  schemas:
    invalid_record:
      type: object
      properties:
        "$field_name":
          type: array
          items:
            type: string
            description: Errors related to $field_name
            example: "$field_name can't be blank"
    user:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum:
          - admin
          default: admin
        account_approved:
          type: boolean
          description: The account has been approved/activated by the admin
        registration_date:
          type: string
          format: date_time
          description: Registration date in ISO 8601 format
          example: '2022-06-30T00:00:00.000+02:00'
        last_edited_project_id:
          type: integer
          nullable: true
      required:
      - email
      - name
    credentials:
      type: object
      properties:
        user:
          type: object
          properties:
            email:
              type: string
              format: email
            password:
              type: string
              format: password
          required:
          - email
          - password
    user_email:
      type: object
      properties:
        user:
          type: object
          properties:
            email:
              type: string
              format: email
          required:
          - email
    user_reset_password:
      type: object
      properties:
        user:
          type: object
          properties:
            reset_password_token:
              type: string
              example: reset_password_token
            password:
              type: string
              minimum: 8
              maximum: 128
              example: password1
              description: must contain at least one digit and one letter
            password_confirmation:
              type: string
              example: password1
              description: must match password
          required:
          - reset_password_token
          - password
          - password_confirmation
    project:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          maximum: 50
        default_witness:
          type: string
          nullable: true
          example: A
          description: It is required when then source file is text/plain
        witnesses:
          type: array
          nullable: true
          items:
            type: object
            properties:
              id:
                type: string
                description: ID, It is the same as Siglum
                example: A
              name:
                type: string
                description: Full name of witness
                example: Lorem ipsum
              siglum:
                type: string
                description: Siglum
                example: A
              default:
                type: boolean
                example: false
        witnesses_count:
          type: integer
          description: Number of witnesses
        status:
          type: string
          enum:
          - processing
          - processed
          - invalid
          default: processing
        created_by:
          type: string
          default: John Doe
          nullable: true
        creator_id:
          type: integer
          default: '1'
          nullable: true
        creation_date:
          type: string
          format: date_time
          description: Date in ISO 8601 format
          example: '2022-06-30T00:00:00.000+02:00'
        last_edit_by:
          type: string
          default: John Doe
          nullable: true
        last_edit_date:
          type: string
          format: date_time
          description: Date in ISO 8601 format
          example: '2022-07-01T00:00:00.000+02:00'
        import_errors:
          type: object
          nullable: true
          properties:
            file_format:
              type: array
              nullable: true
              items:
                type: string
                description: The list of errors that happened during data import
                example: The file format is not supported.
      required:
      - name
    witness:
      type: object
      properties:
        id:
          type: string
          description: ID, It is the same as Siglum
          example: A
        name:
          type: string
          description: Full name of witness
          example: Lorem ipsum
          maximum: 50
          nullable: true
        siglum:
          type: string
          description: Siglum
          example: A
        default:
          type: boolean
          example: false
    witness_create:
      type: object
      properties:
        witness:
          type: object
          properties:
            name:
              type: string
              description: Full name of witness
              example: Lorem ipsum
              maximum: 50
              nullable: true
            siglum:
              type: string
              description: Siglum
              example: A
          required:
          - siglum
    witness_update:
      type: object
      properties:
        witness:
          type: object
          properties:
            name:
              type: string
              description: Full name of witness
              example: Lorem ipsum
              maximum: 50
              nullable: true
            default:
              type: boolean
              description: Whether it should be a default witness of the project
              example: false
    token:
      type: object
      properties:
        id:
          type: integer
          example: 1
        t:
          type: string
          description: Token value. The *Ø* means that the value is empty.
          example: Lorem ipsum
          nullable: false
        apparatus_index:
          type: integer
          description: Index of apparatus, available only if the token is listed there
          example: 1
          nullable: true
        index:
          type: integer
          description: Index of token, starting from 0
          example: 1
          nullable: true
        state:
          type: string
          enum:
          - one_variant
          - not_evaluated
          - evaluated_with_single
          - evaluated_with_multiple
          default: not_evaluated
          description: The state of token is returned only when edit_mode enabled.<br>*:one_variant*
            - all witnesses have the same reading,<br>*:not_evaluated* - has not been
            evaluated yet (no reading selected),<br>*:evaluated_with_single* - only
            a single significant reading selected,<br>*:evaluated_with_multiple* -
            multiple significant readings selected
    token_edit:
      type: object
      properties:
        id:
          type: integer
          example: 1
        apparatus:
          type: object
          description: Significant readings for token. Can be blank if there was no
            selection.
          nullable: true
          properties:
            selected_reading:
              type: string
              description: Selected reading value. The *Ø* means that the reading
                value is empty.
              example: Lorem ipsum]
            details:
              type: string
              description: The witnesses of the selected variant and then possible
                readings with their witnesses. The *Ø* means that the reading value
                is empty.
              example: A B, Lorem ipsam st., Lorem ipsem E F
        grouped_variants:
          type: array
          description: Available variants, grouped by the same t (value)
          items:
            type: object
            properties:
              id:
                type: string
                example: AB
                description: 'The ID is auto-generated from the witnesses. For example,
                  for witnesses: [''A'', ''B'', ''E''] it would be ''ABE''.'
              witnesses:
                type: array
                items:
                  type: string
                  description: List of witnesses that use this variant
                  example: A
              t:
                type: string
                description: Variant value
                example: Lorem ipsum
                nullable: true
              selected:
                type: boolean
                description: Whether is selected as a primary reading
              possible:
                type: boolean
                description: Whether is selected as a secondary reading
        variants:
          type: array
          description: Available variants with their values (t)
          items:
            type: object
            properties:
              witness:
                type: string
                example: A
                description: ID of the witness that includes this variant
              t:
                type: string
                description: Variant value
                example: Lorem ipsum
                nullable: true
        editorial_remark:
          type: object
          properties:
            type:
              type: string
              enum:
              - st.
              - corr.
              - em.
              - conj.
              description: Editorial remark type
              example: st.
            t:
              type: string
              description: Variant value
              example: Lorem ipsam
              nullable: true
    grouped_variant:
      type: object
      properties:
        id:
          type: string
          example: AB
          description: 'The ID is auto-generated from the witnesses. For example,
            for witnesses: [''A'', ''B'', ''E''] it would be ''ABE''.'
        selected:
          type: boolean
          description: Whether is selected as a primary reading
        possible:
          type: boolean
          description: Whether is selected as a secondary reading
    variant:
      type: object
      properties:
        witness:
          type: string
          description: Witness ID
          example: A
        t:
          type: string
          description: Variant value
          example: Lorem ipsum
          nullable: true
    editorial_remark:
      type: object
      properties:
        type:
          type: string
          enum:
          - st.
          - corr.
          - em.
          - conj.
          description: Editorial remark type
          example: st.
        t:
          type: string
          description: Variant value
          example: Lorem ipsum
          nullable: true
    significant_variant:
      type: object
      properties:
        token_id:
          type: integer
          description: The ID of token
          example: 1
        index:
          type: integer
          description: Index of apparatus, starting with 1
          example: 1
        value:
          type: object
          properties:
            selected_reading:
              type: string
              description: Selected reading value. The *Ø* means that the reading
                value is empty.
              example: raged]
            details:
              type: string
              description: The witnesses of the selected variant and then possible
                readings with their witnesses. The *Ø* means that the reading value
                is empty.
              example: A B, continued C D, group E F
    insignificant_variant:
      type: object
      properties:
        token_id:
          type: integer
          description: The ID of token
          example: 1
        index:
          type: integer
          description: Index of apparatus, starting with 1
          example: 1
        value:
          type: object
          properties:
            selected_reading:
              type: string
              description: Selected reading value. The *Ø* means that the reading
                value is empty.
              example: raged]
            details:
              type: string
              description: The witnesses of the selected variant and then insignificant
                readings with their witnesses. The *Ø* means that the reading value
                is empty.
              example: A B, continued C D, group E F
    login_required:
      type: object
      properties:
        error:
          type: string
          example: You need to sign in or sign up before continuing.
    record_not_found:
      type: object
      properties:
        error:
          type: string
          example: Record not found.
    forbidden_request:
      type: object
      properties:
        error:
          type: string
          example: Not authorized to perform this action.
    comment:
      type: object
      properties:
        id:
          type: integer
          description: ID of the comment
          example: 1
        body:
          type: string
          description: Body of the comment
          example: I like to comment on things and pancakes are nice!
        token_id:
          type: integer
          description: ID of the token
          example: 1
        user_id:
          type: integer
          description: ID of the user who created given comment
          example: 1
        created_at:
          type: date_time
          description: Creation date
          example: '2021-02-03T12:00:00+00:00'
        created_by:
          type: string
          description: Name of the user who created given comment
          example: Jonny Bravo
        last_edit_at:
          type: date_time
          description: Last edit date if exists
          example: '2021-02-03T12:00:00+00:00'
    exported_project:
      type: string
      format: binary
      example: "{\rtf1\ansideff0 {\fonttbl {\f0 Times New Roman;}}{par\nLorem ipsum
        { uper 1}\npar}{par \n(1) {\b Lorem ipsum]} w1, Lorem ipsam w2 w3;\npar}\n}"
paths:
  "/api/v1/projects/{project_id}/tokens/{token_id}/comments":
    get:
      summary: Retrieves all the comments for given token
      tags:
      - Projects
      security:
      - bearer: []
      description: List of comments
      parameters:
      - name: project_id
        in: path
        description: ID of the project
        required: true
        schema:
          type: integer
      - name: token_id
        in: path
        description: ID of the token
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/comment"
        '401':
          description: Login required
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/login_required"
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/record_not_found"
    post:
      summary: Creates a new comment for given token
      tags:
      - Projects
      security:
      - bearer: []
      description: Creates a new comment
      parameters:
      - name: project_id
        in: path
        description: ID of the project
        required: true
        schema:
          type: integer
      - name: token_id
        in: path
        description: ID of the token
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/comment"
        '422':
          description: Comment data invalid
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/invalid_record"
        '401':
          description: Login required
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/login_required"
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/record_not_found"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  maximum: 250
                  description: Body of the comment
                  example: This is a really nice comment.
              required:
              - body
  "/api/v1/projects/{project_id}/tokens/{token_id}/comments/{id}":
    put:
      summary: Updates a comment
      tags:
      - Projects
      security:
      - bearer: []
      description: Updates a body of given comment
      parameters:
      - name: project_id
        in: path
        schema:
          type: integer
        required: true
        description: ID of the project
      - name: token_id
        in: path
        schema:
          type: integer
        required: true
        description: ID of the token
      - name: id
        in: path
        schema:
          type: integer
        required: true
        description: ID of the comment
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/comment"
        '401':
          description: Login required
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/login_required"
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/record_not_found"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  maximum: 250
                  description: Comment's body
                  example: This is an updated body
        required: true
    delete:
      summary: Deletes specified comment
      tags:
      - Projects
      security:
      - bearer: []
      description: Deletes specified comment
      parameters:
      - name: project_id
        in: path
        schema:
          type: integer
        required: true
        description: ID of the project
      - name: token_id
        in: path
        schema:
          type: integer
        required: true
        description: ID of the token
      - name: id
        in: path
        schema:
          type: integer
        required: true
        description: ID of the comment
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Record successfully deleted
        '401':
          description: Login required
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/login_required"
        '403':
          description: Forbidden if current user doesn't match comment creator
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/forbidden_request"
        '404':
          description: Project or comment not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/record_not_found"
  "/api/v1/users/confirmation":
    post:
      summary: Re-sends the confirmation email
      tags:
      - Users
      description: The confirmation email will be sent to user if email exists in
        the database.
      parameters: []
      responses:
        '200':
          description: Email confirmation sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: If your email address exists in our database, you will
                      receive an email with instructions for how to confirm your email
                      address in a few minutes.
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/user_email"
    get:
      summary: Confirms user's email
      tags:
      - Users
      parameters:
      - name: confirmation_token
        in: query
        schema:
          type: string
        description: Confirmation token from the URL
        required: true
      responses:
        '200':
          description: Email confirmed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: 'Specifies whether the user can already sign in,
                      or needs to wait for Admin to approve their account: "Your email
                      address has been successfully confirmed. You can now log in.",
                      "Your email address has been successfully confirmed. Admin will
                      review your account, and we will let you know once you can sign
                      in.".'
                    example: Your email address has been successfully confirmed. Admin
                      will review your account, and we will let you know once you
                      can sign in.
        '422':
          description: Invalid/blank confirmation_token or already confirmed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/invalid_record"
  "/api/v1/editorial_remarks":
    get:
      summary: Returns editorial remark types
      tags:
      - Projects
      security:
      - bearer: []
      description: 'Apparatus: Editorial Remark Types'
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
        '401':
          description: Login required
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/login_required"
  "/api/v1/projects/{project_id}/insignificant_variants":
    get:
      summary: Retrieves insignificant variants of the specified project
      tags:
      - Projects
      security:
      - bearer: []
      description: 'Apparatus: Insignificant variants of the project.'
      parameters:
      - name: project_id
        in: path
        schema:
          type: integer
        required: true
        description: ID of the project
      responses:
        '200':
          description: Insignificant variants can be retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  records:
                    type: array
                    items:
                      "$ref": "#/components/schemas/insignificant_variant"
                  count:
                    type: integer
                    description: Number of all records
                    example: 50
        '401':
          description: Login required
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/login_required"
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/record_not_found"
  "/api/v1/users/password":
    post:
      summary: Sends the reset password email
      tags:
      - Users
      security:
      - bearer: []
      description: If email can be found in the database, the reset password email
        will be sent.
      parameters: []
      responses:
        '200':
          description: Reset password sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: If your email address exists in our database, you will
                      receive a password recovery link at your email address in a
                      few minutes.
        '422':
          description: Invalid or empty email address given
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/invalid_record"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/user_email"
    put:
      summary: Sets new password
      tags:
      - Users
      security:
      - bearer: []
      description: Updating the password using reset_password_token
      parameters: []
      responses:
        '200':
          description: Password updated
          headers:
            Authorization:
              schema:
                type: string
              description: 'The JWT token for user with the following format: Bearer
                {token}'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your password has been changed successfully. You are
                      now signed in.
        '401':
          description: Not confirmed/approved yet
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: 'Specifies why the user cannot be signed in after
                      updating their password: "Your password has been changed successfully.
                      However we cannot sign you in, because you have to confirm your
                      email address first.", "Your password has been changed successfully.
                      However we cannot sign you in, because your account has not
                      been approved by the administrator yet.".'
                    example: Your password has been changed successfully. However
                      we cannot sign you in, because your account has not been approved
                      by the administrator yet.
        '422':
          description: Invalid password or reset password token
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/invalid_record"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/user_reset_password"
  "/api/v1/projects":
    get:
      summary: Retrieves list of projects
      tags:
      - Projects
      security:
      - bearer: []
      description: Allows retrieving list of correctly processed projects. The projects
        are sorted by the updated_at date with the most recently updated records first.
      responses:
        '200':
          description: Projects can be retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  records:
                    type: array
                    items:
                      "$ref": "#/components/schemas/project"
                  count:
                    type: integer
                    description: Number of all records
                    example: 50
        '401':
          description: Login required
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/login_required"
    post:
      summary: Creates a new project
      tags:
      - Projects
      security:
      - bearer: []
      description: Creates a new project. The project data is imported using background
        job. Please check `GET /api/v1/projects/{id}` endpoint to review the import
        result.
      parameters: []
      responses:
        '200':
          description: Project can be created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/project"
        '422':
          description: Project data invalid
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/invalid_record"
        '401':
          description: Login required
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/login_required"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                project:
                  type: object
                  properties:
                    name:
                      type: string
                      maximum: 50
                      description: Project name
                      example: Project name
                    source_file:
                      type: object
                      properties:
                        data:
                          type: string
                          format: byte
                          description: 'Base64 encoded file in the following format:
                            `data:text/plain;base64,[base64 data]`. [Click here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs)
                            for more details on formatting.'
                    default_witness:
                      type: string
                      example: A
                      nullable: true
                      description: It is required only when then source file is text/plain
                    default_witness_name:
                      type: string
                      example: Name
                      nullable: true
                      maximum: 50
                      description: Optional, can be provided when then source file
                        is text/plain
                  required:
                  - name
                  - source_file
  "/api/v1/projects/{id}":
    get:
      summary: Retrieves project details
      tags:
      - Projects
      security:
      - bearer: []
      description: Get selected project details.
      parameters:
      - name: id
        in: path
        schema:
          type: integer
        required: true
        description: ID of project
      responses:
        '200':
          description: Project found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/project"
        '401':
          description: Login required
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/login_required"
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/record_not_found"
    put:
      summary: Updates project details
      tags:
      - Projects
      security:
      - bearer: []
      description: Update selected project details.
      parameters:
      - name: id
        in: path
        schema:
          type: integer
        required: true
        description: ID of project
      responses:
        '200':
          description: Project updated
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/project"
        '401':
          description: Login required
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/login_required"
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/record_not_found"
        '422':
          description: Project data invalid
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/invalid_record"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                project:
                  type: object
                  properties:
                    name:
                      type: string
                      maximum: 50
                      description: Project name
                      example: Project name
                  required:
                  - name
    delete:
      summary: Deletes the project
      tags:
      - Projects
      security:
      - bearer: []
      description: Deletes the project. Available only for project creators.
      parameters:
      - name: id
        in: path
        schema:
          type: integer
        required: true
        description: ID of project
      responses:
        '200':
          description: Project successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Record successfully deleted
        '401':
          description: Login required
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/login_required"
        '403':
          description: Request forbidden if not created the project
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/forbidden_request"
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/record_not_found"
  "/api/v1/projects/{id}/export":
    put:
      summary: Export project to file
      tags:
      - Projects
      security:
      - bearer: []
      parameters:
      - name: id
        in: path
        schema:
          type: integer
        required: true
        description: ID of project
      - name: project
        in: query
        schema:
          type: object
          properties:
            project:
              type: object
              properties:
                significant_readings:
                  type: boolean
                  description: Significant readings enabled
                insignificant_readings:
                  type: boolean
                  description: Insignificant readings enabled
                footnote_numbering:
                  type: boolean
                  description: Footnote numbering enabled
                layout:
                  type: string
                  description: File Layout
                  enum:
                  - apparatus_at_the_end
                selected_reading_separator:
                  type: string
                  description: Selected reading separator
                  example: "]"
                secondary_readings_separator:
                  type: string
                  description: Secondary readings separator
                  example: ","
                insignificant_readings_separator:
                  type: string
                  description: Insignificant readings separator
                  example: ","
                entries_separator:
                  type: string
                  description: Entries separator
                  example: ";"
              required:
              - significant_readings
              - insignificant_readings
              - footnote_numbering
              - layout
              - selected_reading_separator
              - secondary_readings_separator
              - insignificant_readings_separator
              - entries_separator
      responses:
        '200':
          description: File successfully generated
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/exported_project"
        '401':
          description: Login required
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/login_required"
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/record_not_found"
        '422':
          description: Given options are invalid
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/invalid_record"
  "/api/v1/users/session-token":
    post:
      summary: Generates new JWT token
      tags:
      - Authorization
      security:
      - bearer: []
      description: Returns new JWT token to prolong user's session
      responses:
        '204':
          description: Token has been successfully generated and is available in response
            headers
          headers:
            Authorization:
              schema:
                type: string
              description: 'The JWT token for user with the following format: Bearer
                {token}'
        '401':
          description: Login required
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/login_required"
  "/api/v1/users/sign_in":
    post:
      summary: Signs the user in
      tags:
      - Authorization
      description: Signs the user in using email and password combination
      parameters: []
      responses:
        '201':
          description: User has been successfully signed in
          headers:
            Authorization:
              schema:
                type: string
              description: 'The JWT token for user with the following format: Bearer
                {token}'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/user"
        '401':
          description: Login credentials are incorrect, email not confirmed or user
            has not been approved yet
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: 'Specifies why the user cannot be logged in: "Invalid
                      email or password.", "You have to confirm your email address
                      before continuing.", "Your account has not been approved by
                      the administrator yet."'
                    example: Invalid email or password.
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/credentials"
  "/api/v1/users/sign_out":
    delete:
      summary: Logs out the user
      tags:
      - Authorization
      security:
      - bearer: []
      description: Signs out the user and invalidates the token.
      responses:
        '204':
          description: 'User has been signed out '
  "/api/v1/projects/{project_id}/significant_variants":
    get:
      summary: Retrieves significant variants of the specified project
      tags:
      - Projects
      security:
      - bearer: []
      description: 'Apparatus: Significant variants of the project.'
      parameters:
      - name: project_id
        in: path
        schema:
          type: integer
        required: true
        description: ID of the project
      responses:
        '200':
          description: Significant variants can be retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  records:
                    type: array
                    items:
                      "$ref": "#/components/schemas/significant_variant"
                  count:
                    type: integer
                    description: Number of all records
                    example: 50
        '401':
          description: Login required
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/login_required"
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/record_not_found"
  "/api/v1/projects/{project_id}/tokens":
    get:
      summary: Retrieves tokens of the specified project
      tags:
      - Projects
      security:
      - bearer: []
      description: Get tokens of the project. It returns tokens for the *Read mode*
        by default. <br>When *edit_mode* flag is enabled, the tokens will include
        additional details (state and index).
      parameters:
      - name: project_id
        in: path
        schema:
          type: integer
        required: true
        description: ID of the project
      - name: edit_mode
        in: query
        schema:
          type: boolean
        required: false
        description: When true, the returned tokens will include additional details
          (token state)
      responses:
        '200':
          description: Tokens can be retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  records:
                    type: array
                    items:
                      "$ref": "#/components/schemas/token"
                  count:
                    type: integer
                    description: Number of all records
                    example: 50
        '401':
          description: Login required
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/login_required"
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/record_not_found"
  "/api/v1/projects/{project_id}/tokens/{id}":
    get:
      summary: Retrieves token details
      tags:
      - Projects
      security:
      - bearer: []
      description: Get the token details.
      parameters:
      - name: project_id
        in: path
        schema:
          type: integer
        required: true
        description: ID of the project
      - name: id
        in: path
        schema:
          type: integer
        required: true
        description: ID of token
      responses:
        '200':
          description: Token found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/token_edit"
        '401':
          description: Login required
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/login_required"
        '404':
          description: Project or token not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/record_not_found"
  "/api/v1/projects/{project_id}/tokens/{id}/grouped_variants":
    patch:
      summary: Updates token grouped variants
      tags:
      - Projects
      security:
      - bearer: []
      description: Update the token selections by updating the **grouped_variants**.<br>Use
        *selected* when setting the main reading and *possible* for secondary readings.
        <br>The user who edits the token will be saved as the last editor of the project.
      parameters:
      - name: project_id
        in: path
        schema:
          type: integer
        required: true
        description: ID of the project
      - name: id
        in: path
        schema:
          type: integer
        required: true
        description: ID of token
      responses:
        '200':
          description: Token updated
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/token_edit"
        '401':
          description: Login required
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/login_required"
        '404':
          description: Project or token not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/record_not_found"
        '422':
          description: Token data invalid
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/invalid_record"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: object
                  properties:
                    grouped_variants:
                      type: array
                      items:
                        "$ref": "#/components/schemas/grouped_variant"
                  required:
                  - grouped_variants
  "/api/v1/projects/{project_id}/tokens/{id}/variants":
    patch:
      summary: Updates token variants and editorial remark
      tags:
      - Projects
      security:
      - bearer: []
      description: 'Update the selected token details.<br>Use **variants** when editing
        the content for the specific witness. <br>Use **editorial_remark** when adding
        or editing the editorial remark, only the following types are available: *''st.'',
        ''corr.'', ''em.'', ''conj.''*. ''                  ''The *''em.'' and ''conj.''*
        will become automatically selected. <br>If **variants** or **editorial_remark**
        are updated, the **grouped_variants** will  be calculated once again, all
        previous selections will be cleared.<br>The user who edits the token will
        be saved as the last editor of the project.'
      parameters:
      - name: project_id
        in: path
        schema:
          type: integer
        required: true
        description: ID of the project
      - name: id
        in: path
        schema:
          type: integer
        required: true
        description: ID of token
      responses:
        '200':
          description: Token updated
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/token_edit"
        '401':
          description: Login required
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/login_required"
        '404':
          description: Project or token not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/record_not_found"
        '422':
          description: Token data invalid
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/invalid_record"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: object
                  properties:
                    variants:
                      type: array
                      items:
                        "$ref": "#/components/schemas/variant"
                    editorial_remark:
                      "$ref": "#/components/schemas/editorial_remark"
                  required:
                  - variants
  "/api/v1/projects/{project_id}/tokens/resize":
    patch:
      summary: Update the width of selected tokens
      tags:
      - Projects
      security:
      - bearer: []
      description: Uses given params to merge multiple tokens into one. <br>The selections,
        editorial remarks, and comments won't be preserved. <br>The number of tokens
        in the project may be changed by this operation.
      parameters:
      - name: project_id
        in: path
        schema:
          type: integer
        required: true
        description: ID of the project
      responses:
        '200':
          description: Changes saved
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The selected tokens have been successfully updated.
        '401':
          description: Login required
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/login_required"
        '404':
          description: Project found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/record_not_found"
        '422':
          description: Given data invalid
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/invalid_record"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: object
                  properties:
                    selected_token_ids:
                      type: array
                      items:
                        type: integer
                        description: IDs of the selected tokens. All tokens must belong
                          to the given project.The given tokens must be next to each
                          other in the constituted text.
                    tokens_with_offsets:
                      type: array
                      items:
                        type: object
                        properties:
                          offset:
                            type: integer
                            description: Offset value. Must be a 0 or a positive integer.
                          token_id:
                            type: integer
                            description: ID of the token for the given offset. The
                              token ID must be also included in :selected_token_ids
                  required:
                  - selected_text
                  - selected_token_ids
                  - tokens_with_offsets
  "/api/v1/projects/{project_id}/tokens/{id}/split":
    parameters:
    - name: project_id
      in: path
      description: project_id
      required: true
      schema:
        type: string
    - name: id
      in: path
      description: token_id
      required: true
      schema:
        type: string
    patch:
      summary: Split token into two new tokens
      tags:
      - Projects
      security:
      - bearer: []
      description: Splits given token into two new tokens <br>Variants will be separated
        between two tokens based on user's choice to split
      parameters:
      - name: project_id
        in: path
        schema:
          type: integer
        required: true
        description: ID of the project
      - name: id
        in: path
        schema:
          type: integer
        required: true
        description: ID of token
      responses:
        '200':
          description: Changes saved
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your token was split successfully.
        '401':
          description: Login required
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/login_required"
        '404':
          description: Project found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/record_not_found"
        '422':
          description: Given data invalid
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/invalid_record"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                variants:
                  type: object
                  properties:
                    witness:
                      type: string
                      description: Witness value with splitting point
                    t:
                      type: string
                      description: t value with splitting point
              required:
              - witness
              - t
                  required:
                  - selected_token_ids
  "/api/v1/projects/{project_id}/tokens/edited":
    get:
      summary: Checks if tokens with given ids have comments, editorial remarks, or
        selected variants.
      tags:
      - Projects
      security:
      - bearer: []
      description: Checks if tokens with given ids have comments, editorial remarks,
        or selected variants.
      parameters:
      - name: project_id
        in: path
        schema:
          type: integer
        required: true
        description: ID of the project
      - name: selected_token_ids
        in: path
        schema:
          type: array
        required: true
        description: IDs of the selected tokens. All tokens must belong to the given
          project.
      responses:
        '200':
          description: Tokens checked
          content:
            application/json:
              schema:
                type: object
                properties:
                  comments:
                    type: boolean
                    description: It is true if any of the given tokens has at least
                      one comment
                  editorial_remarks:
                    type: boolean
                    description: It is true if any of the given tokens has an editorial
                      remark
                  variants_selections:
                    type: boolean
                    description: It is true if any of the given tokens has selected
                      variant
        '401':
          description: Login required
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/login_required"
        '404':
          description: Project found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/record_not_found"
  "/api/v1/users":
    get:
      summary: Retrieves list of users
      tags:
      - Users
      security:
      - bearer: []
      description: Allows retrieving all users list. The users are sorted by the registration
        date with the most records first.
      responses:
        '200':
          description: Users can be retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  records:
                    type: array
                    items:
                      "$ref": "#/components/schemas/user"
                  count:
                    type: integer
                    description: Number of all records
                    example: 50
        '401':
          description: Login required
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/login_required"
    post:
      summary: Creates new user account
      tags:
      - Users
      security:
      - bearer: []
      description: Creates new account.
      parameters: []
      responses:
        '200':
          description: User can be created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/user"
        '422':
          description: User data invalid
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/invalid_record"
        '403':
          description: Not Authorized if logged in
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/forbidden_request"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    email:
                      type: string
                      example: email@example.com
                    password:
                      type: string
                      minimum: 8
                      maximum: 128
                      example: password1
                      description: must contain at least one digit and one letter
                    password_confirmation:
                      type: string
                      example: password1
                      description: must match password
                    name:
                      type: string
                      example: name
                  required:
                  - email
                  - password
                  - password_confirmation
                  - name
  "/api/v1/users/{id}/approve":
    patch:
      summary: Approves the user
      tags:
      - Users
      security:
      - bearer: []
      parameters:
      - name: id
        in: path
        schema:
          type: integer
        description: ID of user to be approved
        required: true
      description: Allows approving the new user account.
      responses:
        '200':
          description: New user can be approved
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/user"
        '401':
          description: Login required
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/login_required"
  "/api/v1/users/me":
    get:
      summary: Retrieves logged in user details
      tags:
      - Users
      security:
      - bearer: []
      responses:
        '200':
          description: User details can be retrieved
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/user"
        '401':
          description: Login required
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/login_required"
  "/api/v1/users/{id}/last_edited_project":
    get:
      summary: Retrieves last edited project id by user
      tags:
      - Users
      security:
      - bearer: []
      parameters:
      - name: id
        in: path
        schema:
          type: integer
        description: User ID
        required: true
      responses:
        '200':
          description: Last edited project id can be retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  last_edited_project_id:
                    type: integer
                    nullable: true
                    example: 123
        '401':
          description: Login required
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/login_required"
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/record_not_found"
  "/api/v1/projects/{project_id}/witnesses":
    get:
      summary: Retrieves witnesses of the specified project
      tags:
      - Projects
      security:
      - bearer: []
      description: Get witnesses of the project.
      parameters:
      - name: project_id
        in: path
        schema:
          type: integer
        required: true
        description: ID of the project
      responses:
        '200':
          description: Witnesses can be retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  records:
                    type: array
                    items:
                      "$ref": "#/components/schemas/witness"
                  count:
                    type: integer
                    description: Number of all records
                    example: 50
        '401':
          description: Login required
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/login_required"
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/record_not_found"
    post:
      summary: Adds a new witness to the specified project
      tags:
      - Projects
      security:
      - bearer: []
      description: Adds a new witness to the project.
      parameters:
      - name: project_id
        in: path
        schema:
          type: integer
        required: true
        description: ID of the project
      responses:
        '200':
          description: Witnesses created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/witness"
        '422':
          description: Witness data invalid
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/invalid_record"
        '401':
          description: Login required
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/login_required"
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/record_not_found"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/witness_create"
  "/api/v1/projects/{project_id}/witnesses/{id}":
    put:
      summary: Updates the specified witness
      tags:
      - Projects
      security:
      - bearer: []
      description: Update the given witness.
      parameters:
      - name: project_id
        in: path
        schema:
          type: integer
        required: true
        description: ID of the project
      - name: id
        in: path
        schema:
          type: string
        required: true
        description: ID of the edited witness
      responses:
        '200':
          description: Witnesses updated
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/witness"
        '401':
          description: Login required
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/login_required"
        '404':
          description: Project or witness not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/record_not_found"
        '422':
          description: Witness is invalid
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/invalid_record"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/witness_update"
    delete:
      summary: Deletes the specified witness and its token variants
      tags:
      - Projects
      security:
      - bearer: []
      description: Deletes the given witness. It also deletes all token variants for
        this witness. If any of the token variants was selected, the selection would
        be removed as well. <br>If the witness was the default one, the **first**
        of the remaining witnesses would be a new default witness. <br>**It is not
        possible to delete witness if there are no other witnesses.**
      parameters:
      - name: project_id
        in: path
        schema:
          type: integer
        required: true
        description: ID of the project
      - name: id
        in: path
        schema:
          type: string
        required: true
        description: ID of the removed witness
      responses:
        '200':
          description: Witness removed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Record successfully deleted
        '401':
          description: Login required
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/login_required"
        '403':
          description: Forbidden if there are no other witnesses
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/forbidden_request"
        '404':
          description: Project or witness not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/record_not_found"
servers:
- url: https://{defaultHost}
  variables:
    defaultHost:
      default: localhost:3000
