---
openapi: 3.0.1
info:
  title: API V1
  version: v1
components:
  securitySchemes:
    bearer:
      type: apiKey
      name: Authorization
      in: header
  schemas:
    user:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum:
          - admin
          default: admin
        account_approved:
          type: boolean
      required:
      - email
      - name
    credentials:
      type: object
      properties:
        user:
          type: object
          properties:
            email:
              type: string
              format: email
            password:
              type: string
              format: password
          required:
          - email
          - password
    user_email:
      type: object
      properties:
        user:
          type: object
          properties:
            email:
              type: string
              format: email
          required:
          - email
    user_reset_password:
      type: object
      properties:
        user:
          type: object
          properties:
            reset_password_token:
              type: string
              example: reset_password_token
            password:
              type: string
              minimum: 8
              maximum: 128
              example: password1
              description: must contain at least one digit and one letter
            password_confirmation:
              type: string
              example: password1
              description: must match password
          required:
          - reset_password_token
          - password
          - password_confirmation
    project:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        default_witness:
          type: string
          example: A
          nullable: true
        witnesses:
          type: array
          nullable: true
          items:
            type: object
            properties:
              name:
                type: string
                description: Full name of witness
                example: Lorem ipsum
              witness:
                type: string
                description: Siglum
                example: A
        status:
          type: string
          enum:
          - processing
          - processed
          - invalid
          default: processing
      required:
      - name
paths:
  "/api/v1/users/confirmation":
    post:
      summary: Re-sends the confirmation email
      tags:
      - Users
      description: The confirmation email will be sent to user if email exists in
        the database.
      parameters: []
      responses:
        '200':
          description: Email confirmation sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: If your email address exists in our database, you will
                      receive an email with instructions for how to confirm your email
                      address in a few minutes.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: example@example.com
                  description: Email of the user who wants to receive confirmation
                    email
              required:
              - email
    get:
      summary: Confirms user's email
      tags:
      - Users
      parameters:
      - name: confirmation_token
        in: query
        schema:
          type: string
        description: Confirmation token from the URL
        required: true
      responses:
        '200':
          description: Email confirmed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your email address has been successfully confirmed.
        '422':
          description: Invalid confirmation_token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: array
                    items:
                      type: string
                      example: Confirmation token can't be blank
  "/api/v1/users/password":
    post:
      summary: Sends the reset password email
      tags:
      - Users
      security:
      - bearer: []
      description: If email can be found in the database, the reset password email
        will be sent.
      parameters: []
      responses:
        '200':
          description: Reset password sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: If your email address exists in our database, you will
                      receive a password recovery link at your email address in a
                      few minutes.
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/user_email"
    put:
      summary: Sets new password
      tags:
      - Users
      security:
      - bearer: []
      description: Updating the password using reset_password_token
      parameters: []
      responses:
        '200':
          description: Password updated
          headers:
            Authorization:
              schema:
                type: string
              description: 'The JWT token for user with the following format: Bearer
                {token}'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your password has been changed successfully. You are
                      now signed in.
        '401':
          description: Not approved yet
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your account has not been approved by the administrator
                      yet.
        '422':
          description: Invalid password or reset password token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: array
                    items:
                      type: string
                      description: Errors list
                      example: Password can't be blank
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/user_reset_password"
  "/api/v1/projects":
    post:
      summary: Creates a new project
      tags:
      - Projects
      security:
      - bearer: []
      description: Creates a new project.
      parameters: []
      responses:
        '200':
          description: Project can be created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/project"
        '422':
          description: Project data invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: array
                    items:
                      type: string
                      example: Name can't be blank
        '401':
          description: Login required
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login required.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Project name
                  example: Project name
                source_file:
                  type: string
                  format: byte
                  description: 'Base64 encoded file in the following format: `data:text/plain;base64,[base64
                    data]`. [Click here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs)
                    for more details on formatting.'
              required:
              - name
              - source_file
  "/api/v1/projects/{id}":
    get:
      summary: Retrieves project details
      tags:
      - Projects
      security:
      - bearer: []
      description: Get selected project details.
      parameters:
      - name: id
        in: path
        schema:
          type: integer
        required: true
        description: ID of project
      responses:
        '200':
          description: Project found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/project"
        '401':
          description: Login required
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login required.
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Record not found.
  "/api/v1/users/session-token":
    post:
      summary: Generates new JWT token
      tags:
      - Authorization
      security:
      - bearer: []
      description: Returns new JWT token to prolong user's session
      responses:
        '204':
          description: Token has been successfully generated and is available in response
            headers
          headers:
            Authorization:
              schema:
                type: string
              description: 'The JWT token for user with the following format: Bearer
                {token}'
        '401':
          description: Login required
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login required.
  "/api/v1/users/sign_in":
    post:
      summary: Signs the user in
      tags:
      - Authorization
      description: Signs the user in using email and password combination
      parameters: []
      responses:
        '201':
          description: User has been successfully signed in
          headers:
            Authorization:
              schema:
                type: string
              description: 'The JWT token for user with the following format: Bearer
                {token}'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/user"
        '401':
          description: Login credentials are incorrect, email not confirmed or user
            has not been approved yet
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid email or password.
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/credentials"
  "/api/v1/users/sign_out":
    delete:
      summary: Logs out the user
      tags:
      - Authorization
      security:
      - bearer: []
      description: Signs out the user and invalidates the token.
      responses:
        '204':
          description: 'User has been signed out '
  "/api/v1/users":
    get:
      summary: Retrieves paginated list of users
      tags:
      - Users
      security:
      - bearer: []
      description: Allows retrieving all users list.
      parameters:
      - name: items
        in: query
        schema:
          type: integer
          example: 1
          default: 10
        required: false
        description: Number of records per page
      - name: page
        in: query
        schema:
          type: integer
          default: 1
          example: 1
        required: false
        description: Page number
      responses:
        '200':
          description: Users can be retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  records:
                    type: array
                    items:
                      "$ref": "#/components/schemas/user"
                  count:
                    type: integer
                    description: Number of all records
                    example: 50
                  current_page:
                    type: integer
                    description: Current page
                    example: 1
                    default: 1
                  pages:
                    type: integer
                    description: Number of all pages
                    example: 5
        '401':
          description: Login required
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login required.
    post:
      summary: Creates new user account
      tags:
      - Users
      security:
      - bearer: []
      description: Creates new account.
      parameters: []
      responses:
        '200':
          description: User can be created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/user"
        '422':
          description: User data invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: array
                    items:
                      type: string
                      example: Password can't be blank
        '403':
          description: Not Authorized if logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Not authorized to perform this action.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    email:
                      type: string
                      example: email@example.com
                    password:
                      type: string
                      minimum: 8
                      maximum: 128
                      example: password1
                      description: must contain at least one digit and one letter
                    password_confirmation:
                      type: string
                      example: password1
                      description: must match password
                    name:
                      type: string
                      example: name
                  required:
                  - email
                  - password
                  - password_confirmation
                  - name
  "/api/v1/users/{id}/approve":
    patch:
      summary: Approves the user
      tags:
      - Users
      security:
      - bearer: []
      parameters:
      - name: id
        in: path
        schema:
          type: integer
        description: ID of user to be approved
        required: true
      description: Allows approving the new user account.
      responses:
        '200':
          description: New user can be approved
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/user"
        '401':
          description: Login required
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login required.
servers:
- url: https://{defaultHost}
  variables:
    defaultHost:
      default: www.example.com
